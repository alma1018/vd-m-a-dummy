{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/constantin/workspace/vd-m-a-dummy/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/home/constantin/workspace/vd-m-a-dummy/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/constantin/workspace/vd-m-a-dummy/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport * as d3 from \"d3\";\nimport { Node } from \"../vdma_classes/Node\";\nimport { Edge } from \"../vdma_classes/Edge\";\nimport { Route } from \"../vdma_classes/Route\";\nimport { FTF } from \"../vdma_classes/FTF\";\nimport * as Paho from \"paho-mqtt\";\nimport { SettingsFormComponent } from \"../settings-form/settings-form.component\";\nimport { FtfFormComponent } from \"../ftf-form/ftf-form.component\";\nimport { MatDialog, MatDialogConfig } from \"@angular/material/dialog\";\nimport { MatSnackBar } from '@angular/material/snack-bar';\nimport { EdgeFormComponent } from '../edge-form/edge-form.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"@angular/material/snack-bar\";\n\nfunction GraphMapComponent_div_43_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 22);\n    i0.ɵɵelement(1, \"app-node-form\", 23);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"node\", ctx_r0.selectedNode);\n  }\n}\n\nfunction GraphMapComponent_div_44_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 24);\n    i0.ɵɵelement(1, \"app-route-form\", 25);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"routes\", ctx_r1.routes)(\"mqtt\", ctx_r1.mqtt)(\"ftfs\", ctx_r1.ftfs);\n  }\n}\n\nfunction GraphMapComponent_div_45_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 26);\n    i0.ɵɵelement(1, \"app-ftf-list\", 27);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    var ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ftfs\", ctx_r2.ftfs);\n  }\n} // WORKAROUND FÜR NAMESPACE BUG https://github.com/eclipse/paho.mqtt.javascript/issues/150\n\n\nwindow.Paho = Paho;\nwindow.Paho.MQTT = Paho;\nexport var GraphMapComponent = /*#__PURE__*/(function () {\n  var GraphMapComponent = /*#__PURE__*/function () {\n    function GraphMapComponent(settingsDialog, snackBar, ftfDialog, edgeDialog) {\n      _classCallCheck(this, GraphMapComponent);\n\n      this.settingsDialog = settingsDialog;\n      this.snackBar = snackBar;\n      this.ftfDialog = ftfDialog;\n      this.edgeDialog = edgeDialog; // Stuff um routen, nodes und edges zu verwalten\n\n      this.nodes = [];\n      this.currentRoute = new Route();\n      this.routes = [this.currentRoute];\n      this.edges = [];\n      this.coordinateSystem = {\n        x: 0,\n        y: 0\n      }; // Stuff für Flottenverwaltung\n\n      this.ftfs = []; // Stuff für Maus-Events\n\n      this.buttonDownNode = null;\n      this.buttonUpNode = null;\n      this.selectedNode = null;\n      this.svgActive = false; // Tastaturevents\n\n      this.lastKeyDown = -1;\n      this.colors = d3.scaleOrdinal(d3.schemeCategory10);\n      this.mqttHost = '127.0.0.1';\n      this.mqttPort = 1884;\n      this.mqttClientID = 'VDMA_FTF_PROTO_WEBAPP_' + Math.random().toString(36).substr(2, 6);\n      this.mqttConnected = false;\n      this.mqttManuallyDisconnected = false; // MapStuff\n\n      this.mapWidthInPixels = 701;\n      this.mapHeightInPixels = 489;\n      this.map_origin = [-17.5250000, -12.2250000];\n      this.mapWidthInMeters = 35.05;\n      this.mapHeightInMeters = 24.45;\n      this.mapMetersPerPixel = 0.05;\n      this.mapXoffset = 0.0;\n      this.mapYoffset = 0.0;\n      this.xScale = d3.scaleLinear().domain([this.map_origin[0], -this.map_origin[0]]).range([0, this.mapWidthInPixels]);\n      this.yScale = d3.scaleLinear().domain([-this.map_origin[1], this.map_origin[1]]).range([0, this.mapHeightInPixels]); // Component visibility\n\n      this.routeFormVisible = true;\n      this.ftfListVisible = false;\n    }\n\n    _createClass(GraphMapComponent, [{\n      key: \"ngOnInit\",\n      value: function ngOnInit() {\n        var _this = this;\n\n        // Hier die App starten!\n        this.initSvg(); //this.drawCircles(event);\n\n        this.stage.on('mouseup', this.addNodes.bind(this));\n        d3.select(window).on('keydown', this.keyDown.bind(this)).on('keyup', this.keyUp.bind(this)).on('mousedown', function () {\n          _this.svgActive = false;\n        });\n        this.loadMQTTSettings();\n        this.initMQTT(); // @ts-ignore Route mit Farbe versehen\n\n        this.currentRoute.color = this.colors(this.currentRoute.routeID);\n      }\n    }, {\n      key: \"loadMQTTSettings\",\n      value: function loadMQTTSettings() {\n        if (localStorage.getItem('mqttHost')) {\n          this.mqttHost = localStorage.getItem('mqttHost');\n        }\n\n        if (localStorage.getItem('mqttPort')) {\n          this.mqttPort = Number(localStorage.getItem('mqttPort'));\n        }\n\n        if (localStorage.getItem('mqttClientID')) {\n          this.mqttClientID = localStorage.getItem('mqttClientID');\n        }\n      }\n    }, {\n      key: \"saveMQTTSettings\",\n      value: function saveMQTTSettings() {\n        localStorage.setItem('mqttHost', this.mqttHost);\n        localStorage.setItem('mqttPort', this.mqttPort.toString());\n        localStorage.setItem('mqttClientID', this.mqttClientID);\n      }\n    }, {\n      key: \"initMQTT\",\n      value: function initMQTT() {\n        this.mqtt = new Paho.Client(this.mqttHost, this.mqttPort, this.mqttClientID);\n        this.mqtt.connect({\n          onSuccess: this.onMQTTConnect.bind(this),\n          onFailure: this.onMQTTError.bind(this)\n        });\n        this.mqtt.onMessageArrived = this.onMQTTMessage.bind(this);\n        this.mqtt.onConnectionLost = this.onMQTTConnectionLost.bind(this);\n      }\n    }, {\n      key: \"initScales\",\n      value: function initScales() {\n        this.mapWidthInMeters = this.mapWidthInPixels * this.mapMetersPerPixel;\n        this.mapHeightInMeters = this.mapHeightInPixels * this.mapMetersPerPixel;\n        this.xScale = d3.scaleLinear().domain([-this.mapWidthInMeters / 2 - this.mapXoffset, this.mapWidthInMeters / 2 - this.mapXoffset]).range([0, this.mapDisplayWidth]);\n        this.yScale = d3.scaleLinear().domain([this.mapHeightInMeters / 2 - this.mapYoffset, -this.mapHeightInMeters / 2 - this.mapYoffset]).range([0, this.mapDisplayHeight]);\n        console.log('Kartenmaße: ' + this.mapWidthInPixels + 'x' + this.mapHeightInPixels + ' (px) ' + this.mapWidthInMeters + 'x' + this.mapHeightInMeters + ' (m) Auflösung:' + this.mapMetersPerPixel);\n      }\n    }, {\n      key: \"calculateMapDisplaySettings\",\n      value: function calculateMapDisplaySettings() {\n        this.mapAvailableWidth = window.innerWidth;\n        this.mapAvailableHeight = window.innerHeight - 70; // To account for toolbar\n\n        var mapWidthSizingFactor = this.mapAvailableWidth / this.mapWidthInPixels;\n        var mapHeightSizingFactor = this.mapAvailableHeight / this.mapHeightInPixels;\n\n        if (mapWidthSizingFactor < mapHeightSizingFactor) {\n          // Map fills Width before height, so use width!\n          this.mapSizingFactor = mapWidthSizingFactor;\n          this.mapDisplayWidth = this.mapAvailableWidth;\n          this.mapDisplayHeight = this.mapHeightInPixels * this.mapSizingFactor;\n        } else {\n          // Map fills Height before width!\n          this.mapSizingFactor = mapHeightSizingFactor;\n          this.mapDisplayWidth = this.mapWidthInPixels * this.mapSizingFactor;\n          this.mapDisplayHeight = this.mapAvailableHeight;\n        }\n\n        this.initScales();\n      }\n    }, {\n      key: \"loadCustomMap\",\n      value: function loadCustomMap() {\n        var _this2 = this;\n\n        var customMap = window.localStorage.getItem('customMap');\n\n        if (customMap !== null) {\n          var stage = document.getElementById('stage');\n          var image = new Image();\n          image.src = customMap;\n\n          image.onload = function () {\n            stage.setAttribute('style', \"background-image: url('\" + customMap + \"')\");\n            _this2.mapWidthInPixels = image.width;\n            _this2.mapHeightInPixels = image.height;\n\n            _this2.calculateMapDisplaySettings();\n\n            _this2.setStageSizeToDisplaySettings();\n\n            _this2.initScales();\n          };\n        }\n\n        if (localStorage.getItem('mapMetersPerPixel')) {\n          this.mapMetersPerPixel = Number(localStorage.getItem('mapMetersPerPixel'));\n          this.initScales();\n        }\n      }\n    }, {\n      key: \"setStageSizeToDisplaySettings\",\n      value: function setStageSizeToDisplaySettings() {\n        var stage = document.getElementById('stage');\n        stage.setAttribute('width', this.mapDisplayWidth + 'px');\n        stage.setAttribute('height', this.mapDisplayHeight + 'px');\n      }\n    }, {\n      key: \"initSvg\",\n      value: function initSvg() {\n        // load background picture from local storage if there is one\n        this.loadCustomMap();\n        this.calculateMapDisplaySettings();\n        this.setStageSizeToDisplaySettings();\n        this.stage = d3.select('#stage');\n        this.edgeGroup = this.stage.append('svg:g');\n        this.ftfGroup = this.stage.append('svg:g');\n        this.circleGroup = this.stage.append('svg:g');\n        this.circleGroup.attr('id', 'nodes');\n        this.edgeGroup.attr('id', 'edges');\n        this.ftfGroup.attr('id', 'ftfs');\n        this.stage.append('svg:defs').append('svg:marker').attr('id', 'end-arrow').attr('viewBox', '0 -5 10 10').attr('refX', 6).attr('markerWidth', 3).attr('markerHeight', 3).attr('orient', 'auto').append('svg:path').attr('d', 'M0,-5L10,0L0,5').attr('fill', '#000');\n        this.stage.append('svg:defs').append('svg:marker').attr('id', 'start-arrow').attr('viewBox', '0 -5 10 10').attr('refX', 4).attr('markerWidth', 3).attr('markerHeight', 3).attr('orient', 'auto').append('svg:path').attr('d', 'M10,-5L0,0L10,5').attr('fill', '#000');\n        this.stage.append('svg:defs').append('svg:symbol').attr('id', 'FTF').append('svg:path').attr('fill', '#FF0000'); // Stuff for FTF Symbols and Power Indicator\n\n        this.stage.append('svg:defs').append('svg:line').attr('id', \"powerBackground\").attr('x1', -52).attr('y1', 0).attr('x2', 52).attr('y2', 0).attr('style', \"stroke: #000000; stroke-width: 12px\");\n        this.stage.append('svg:defs').append('svg:line').attr('id', \"power\").attr('x1', -50).attr('y1', 0).attr('x2', 50).attr('y2', 0).attr('style', \"stroke: #00FF00; stroke-width: 9px\").attr('transform', \"scale(0.3)\");\n        this.stage.append('svg:defs').append('svg:line').attr('id', \"powerLost\").attr('x1', -50).attr('y1', 0).attr('x2', 50).attr('y2', 0).attr('style', \"stroke: #FF0000; stroke-width: 9px\");\n        var powerBarGroup = this.stage.append('svg:defs').append('svg:g').attr('id', 'powerBar').attr('transform', 'scale(0.3)');\n        powerBarGroup.append('svg:use').attr('xlink:href', \"#powerBackground\");\n        var ftfBody = this.stage.append('svg:defs').append('svg:g').attr('id', 'ftfBody').attr('transform', 'scale(0.3)');\n        ftfBody.append('svg:rect').attr('x', -50).attr('y', -40).attr('width', 100).attr('height', 80).attr('style', \"stroke: #000000; stroke-width: 4px; fill: #FF0000;\");\n        ftfBody.append('svg:rect').attr('x', -50).attr('y', -40).attr('width', 15).attr('height', 80).attr('style', \"stroke: #000000; stroke-width: 4px; fill: #000000;\");\n        this.drawCoordinateSystem();\n      }\n    }, {\n      key: \"drawCircles\",\n      value: function drawCircles(event) {\n        var _this3 = this;\n\n        var module = this;\n        var circle = this.circleGroup.selectAll('g').data(this.nodes, function (d) {\n          return d.nodeId;\n        }); // update existing circles\n\n        circle.selectAll('circle').style('fill', function (d) {\n          return d === _this3.selectedNode ? d3.rgb(_this3.colors(d.routeID)).brighter().toString() : _this3.colors(d.routeID);\n        }).style('fill-opacity', function (d) {\n          return d.released ? 1 : 0.6;\n        }); // delete old circles\n\n        circle.exit().remove(); // update position\n\n        circle.attr('transform', function (d) {\n          return \"translate(\" + module.xScale(d.position.x) + \",\" + module.yScale(d.position.y) + \")\";\n        }); // update names\n\n        circle.selectAll('.idText').text(function (d) {\n          var text = d.nodeDescription;\n          if (d.start) return text + '-S';else if (d.end) return text + '-E';else return text;\n        });\n        circle.selectAll('line').attr('transform', function (d) {\n          return 'rotate(' + -d.position.theta * (180 / 3.1415926) + ')';\n        });\n        circle.selectAll('.material-icons').text(function (d) {\n          var text = '';\n\n          if (d.actions.length > 0) {\n            text = 'star_border';\n          }\n\n          return text;\n        });\n        var g = circle.enter().append('svg:g');\n        g.append('circle').attr('r', 10).style('fill', function (d) {\n          return d === _this3.selectedNode ? d3.rgb(_this3.colors(d.routeID)).brighter().toString() : _this3.colors(d.routeID);\n        }).style('stroke', function (d) {\n          return d3.rgb(_this3.colors(d.routeID)).darker().toString();\n        }).style('fill-opacity', function (d) {\n          return d.released ? 1 : 0.6;\n        });\n        g.append('svg:text').attr('x', 0).attr('y', 4).attr('class', 'idText').style('font', '12px sans-serif').style('pointer-events', 'none').style('text-anchor', 'middle').style('font-weight', 'bold').text(function (d) {\n          var text = d.nodeDescription;\n          if (d.start) return text + '-S';else if (d.end) return text + '-E';else return text;\n        });\n        g.append('svg:text').attr('class', 'material-icons').attr('style', 'font-size: 18px;').attr('x', 4).attr('y', -4).text(function (d) {\n          var text = '';\n\n          if (d.actions.length > 0) {\n            text = 'star_border';\n          }\n\n          return text;\n        });\n        g.append('line').attr('x1', 10).attr('y1', 0).attr('x2', 16).attr('y2', 0).attr('transform', function (d) {\n          return 'rotate(' + -d.position.theta * (180 / 3.1415926) + ')';\n        }).attr('style', 'stroke-width: 4px;stroke: #000000;');\n        g.attr('transform', function (event, d) {\n          return \"translate(\" + module.xScale(d.position.x) + \",\" + module.yScale(d.position.y) + \")\";\n        }).on('mousedown', function (d) {\n          _this3.svgActive = true;\n          _this3.selectedNode = d;\n        }).on('mouseup', function (d) {\n          _this3.svgActive = true;\n          event.stopPropagation();\n          _this3.buttonUpNode = d;\n\n          if (_this3.buttonDownNode === _this3.buttonUpNode) {\n            _this3.selectedNode = d;\n            console.log(_this3.selectedNode);\n          } else {\n            _this3.addEdge(event, _this3.buttonDownNode, _this3.buttonUpNode);\n          }\n\n          _this3.buttonUpNode = null;\n          _this3.buttonDownNode = null;\n\n          _this3.drawCircles(event);\n\n          _this3.drawEdges(event);\n        });\n        this.circleGroup.selectAll('g').call(d3.drag().subject(function (d) {\n          // @ts-ignore\n          return {\n            x: module.xScale(d.x),\n            y: module.yScale(d.y)\n          };\n        }).on(\"drag\", this.dragFunc.bind(this)));\n      }\n    }, {\n      key: \"addNodes\",\n      value: function addNodes(event) {\n        //@ts-ignore\n        this.svgActive = true;\n\n        if (this.selectedNode !== null) {\n          this.selectedNode = null;\n          this.drawCircles(event);\n          this.drawEdges(event);\n          return;\n        }\n\n        var coords = d3.mouse(document.getElementById('stage'));\n        var node = new Node();\n        node.position.x = this.xScale.invert(coords[0]);\n        node.position.y = this.yScale.invert(coords[1]);\n        node.routeID = this.currentRoute.routeID; // check if route already has a start\n\n        if (this.currentRoute.nodes.length == 0) {\n          node.start = true;\n          this.currentRoute.startNode = node;\n        } else if (this.currentRoute.nodes.length == 1) {\n          node.end = true;\n          this.currentRoute.endNode = node;\n        } else {\n          node.end = true;\n          this.currentRoute.nodes[this.currentRoute.nodes.length - 1].end = false;\n          this.currentRoute.endNode = node;\n        }\n\n        this.nodes.push(node);\n        this.currentRoute.nodes.push(node); // automatically add edge between nodes, but only if they are on the same route!\n\n        if (this.currentRoute.nodes.length > 1) {\n          this.addEdge(event, this.currentRoute.nodes[this.currentRoute.nodes.length - 2], this.currentRoute.nodes[this.currentRoute.nodes.length - 1]);\n        }\n\n        this.drawCircles(event);\n        this.drawEdges(event);\n        console.log(this.nodes);\n        console.log(this.currentRoute);\n      }\n    }, {\n      key: \"dragFunc\",\n      value: function dragFunc(event, d) {\n        d.position.x = this.xScale.invert(event.x);\n        d.position.y = this.yScale.invert(event.y);\n        this.drawCircles(event);\n        this.drawEdges(event); //d3.select(this).attr(\"cx\", d.x = d3.event.x).attr(\"cy\", d.y = d3.event.y);\n      }\n    }, {\n      key: \"drawEdges\",\n      value: function drawEdges(event) {\n        var _this4 = this;\n\n        var module = this;\n        var edge = this.edgeGroup.selectAll('path').data(this.edges, function (d) {\n          return d.edgeId;\n        }); // Remove old edges\n\n        edge.exit().remove(); // Update old edges\n\n        edge.attr('d', function (d) {\n          var deltaX = _this4.xScale(d.endNodeObject.position.x) - _this4.xScale(d.startNodeObject.position.x);\n\n          var deltaY = _this4.yScale(d.endNodeObject.position.y) - _this4.yScale(d.startNodeObject.position.y);\n\n          var dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n          var normX = deltaX / dist;\n          var normY = deltaY / dist; //const sourcePadding = d.left ? 17 : 12;\n          //const targetPadding = d.right ? 17 : 12;\n\n          var sourcePadding = 10;\n          var targetPadding = 10;\n          var sourceX = _this4.xScale(d.startNodeObject.position.x) + sourcePadding * normX;\n          var sourceY = _this4.yScale(d.startNodeObject.position.y) + sourcePadding * normY;\n          var targetX = _this4.xScale(d.endNodeObject.position.x) - targetPadding * normX;\n          var targetY = _this4.yScale(d.endNodeObject.position.y) - targetPadding * normY;\n          var deltaXreal = d.endNodeObject.position.x - d.startNodeObject.position.x;\n          var deltaYreal = d.endNodeObject.position.y - d.startNodeObject.position.y;\n          d.distance = Math.sqrt(deltaXreal * deltaXreal + deltaYreal * deltaYreal);\n          return \"M\".concat(sourceX, \",\").concat(sourceY, \"L\").concat(targetX, \",\").concat(targetY);\n        }).style('stroke-opacity', function (d) {\n          if (d.startNodeObject.released && d.endNodeObject.released) {\n            d.released = true;\n            return \"1\";\n          } else {\n            d.released = false;\n            return \"0.2\";\n          }\n        });\n        edge.enter().append('path').attr('d', function (d) {\n          var deltaX = _this4.xScale(d.endNodeObject.position.x) - _this4.xScale(d.startNodeObject.position.x);\n\n          var deltaY = _this4.yScale(d.endNodeObject.position.y) - _this4.yScale(d.startNodeObject.position.y);\n\n          var dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY);\n          var normX = deltaX / dist;\n          var normY = deltaY / dist; //const sourcePadding = d.left ? 17 : 12;\n          //const targetPadding = d.right ? 17 : 12;\n\n          var sourcePadding = 12;\n          var targetPadding = 12;\n          var sourceX = _this4.xScale(d.startNodeObject.position.x) + sourcePadding * normX;\n          var sourceY = _this4.yScale(d.startNodeObject.position.y) + sourcePadding * normY;\n          var targetX = _this4.xScale(d.endNodeObject.position.x) - targetPadding * normX;\n          var targetY = _this4.yScale(d.endNodeObject.position.y) - targetPadding * normY;\n          var deltaXreal = d.endNodeObject.position.x - d.startNodeObject.position.x;\n          var deltaYreal = d.endNodeObject.position.y - d.startNodeObject.position.y;\n          d.distance = Math.sqrt(deltaXreal * deltaXreal + deltaYreal * deltaYreal);\n          return \"M\".concat(sourceX, \",\").concat(sourceY, \"L\").concat(targetX, \",\").concat(targetY);\n        }).on('mouseup', function (e) {\n          event.stopPropagation();\n\n          if (_this4.lastKeyDown === 17) {// Control key held!\n            // maybe add trajectory config mode?\n          }\n\n          var dialogConfig = new MatDialogConfig();\n          dialogConfig.width = \"600px\";\n          dialogConfig.data = Object.assign({}, e);\n\n          var edgeDialogRef = _this4.edgeDialog.open(EdgeFormComponent, dialogConfig);\n\n          edgeDialogRef.afterClosed().subscribe(function (result) {\n            if (result) {\n              Object.assign(e, result);\n            }\n          });\n        });\n      }\n    }, {\n      key: \"addEdge\",\n      value: function addEdge(event, source, target) {\n        if (source === target) return;\n        if (source === null || target === null) return;\n        if (source.routeID != target.routeID) return;\n        var edge = new Edge(source.nodeId, target.nodeId); // provisorisch\n\n        edge.startNodeObject = source;\n        edge.endNodeObject = target;\n        edge.edgeDescription = 's' + source.nodeId.toString() + 't' + target.nodeId.toString();\n\n        if (this.edges.find(function (e) {\n          return e.edgeDescription == edge.edgeDescription;\n        }) != null) {\n          console.log(\"Edge already existent!\");\n          return;\n        } else {\n          this.edges.push(edge);\n          this.currentRoute.edges.push(edge);\n          console.log('Added edge. Source:' + source.nodeId + ' Target:' + target.nodeId);\n          console.log(this.edges);\n          this.drawEdges(event); // adjust theta of source node to point in target direction\n\n          var xDiff = target.position.x - source.position.x;\n          var yDiff = target.position.y - source.position.y;\n          var theta = Math.atan2(yDiff, xDiff);\n          source.position.theta = theta;\n          this.drawCircles(event);\n        }\n      }\n    }, {\n      key: \"addRoute\",\n      value: function addRoute() {\n        // get start and end point\n        var startNodes = this.currentRoute.nodes.filter(function (n) {\n          return n.start;\n        });\n\n        if (startNodes.length < 1) {\n          console.log('NO START POINT DEFINED IN CURRENT ROUTE!');\n          this.snackBar.open('Kein Startpunkt in aktueller Route definiert. Bitte korrigieren.', 'OK');\n          return;\n        } else if (startNodes.length > 1) {\n          console.log('MORE THAN ONE START POINT DEFINED! CHECK THESE NODES: ');\n          console.log(startNodes);\n          this.snackBar.open('Zu viele Startpunkte in aktueller Route definiert. Bitte korrigieren.', 'OK');\n          return;\n        } else {\n          // == 1\n          this.currentRoute.startNode = startNodes[0];\n        }\n\n        var endNodes = this.currentRoute.nodes.filter(function (n) {\n          return n.end;\n        });\n\n        if (endNodes.length < 1) {\n          console.log('NO END POINT DEFINED IN CURRENT ROUTE!');\n          this.snackBar.open('Kein Endpunkt in aktueller Route definiert. Bitte korrigieren.', 'OK');\n          return;\n        } else if (endNodes.length > 1) {\n          console.log('MORE THAN ONE END POINT DEFINED! CHECK THESE NODES: ');\n          console.log(endNodes);\n          this.snackBar.open('Zu viele Endpunkte in aktueller Route definiert. Bitte korrigieren.', 'OK');\n          return;\n        } else {\n          // == 1\n          this.currentRoute.endNode = endNodes[0];\n        } // all is well\n\n\n        console.log('Saved route:');\n        console.log(this.currentRoute);\n        this.currentRoute = new Route(); //@ts-ignore\n\n        this.currentRoute.color = this.colors(this.currentRoute.routeID);\n        this.routes.push(this.currentRoute);\n        console.log('New route ID: ' + this.currentRoute.routeID);\n      }\n    }, {\n      key: \"keyDown\",\n      value: function keyDown(event) {\n        var _this5 = this;\n\n        var module = this;\n        if (this.lastKeyDown !== -1) return;\n        this.lastKeyDown = event.keyCode; // entf oder backspace\n\n        if (this.lastKeyDown === 8 || this.lastKeyDown === 46) {\n          if (this.selectedNode !== null) {\n            if (!this.svgActive) return; // remove edges with node\n\n            var edgesToRemove = this.edges.filter(function (e) {\n              return e.startNode === _this5.selectedNode.nodeId || e.endNode === _this5.selectedNode.nodeId;\n            });\n\n            var _iterator = _createForOfIteratorHelper(edgesToRemove),\n                _step;\n\n            try {\n              for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                var edge = _step.value;\n                this.edges.splice(this.edges.indexOf(edge), 1);\n              } // remove node\n\n            } catch (err) {\n              _iterator.e(err);\n            } finally {\n              _iterator.f();\n            }\n\n            this.nodes.splice(this.nodes.indexOf(this.selectedNode), 1); // remove node from currentroute to fix the Edge-To-Disappearing-Node Bug\n\n            if (this.selectedNode.routeID === this.currentRoute.routeID) {\n              this.currentRoute.nodes.splice(this.currentRoute.nodes.indexOf(this.selectedNode), 1);\n            }\n\n            this.selectedNode = null;\n            this.drawCircles(event);\n            this.drawEdges(event);\n          }\n        }\n      }\n    }, {\n      key: \"keyUp\",\n      value: function keyUp(event) {\n        this.lastKeyDown = -1;\n        var key = event.keyCode;\n      }\n    }, {\n      key: \"onMQTTConnect\",\n      value: function onMQTTConnect() {\n        // Subscribe\n        console.log('MQTT connected');\n        this.mqtt.subscribe('hello');\n        this.mqttConnected = true;\n        this.snackBar.open('MQTT verbunden!', null, {\n          duration: 2000\n        });\n        this.initFTF();\n      }\n    }, {\n      key: \"onMQTTError\",\n      value: function onMQTTError(error) {\n        this.mqttConnected = this.mqtt.isConnected();\n        console.log('MQTT ERROR:');\n        console.log(error);\n        this.snackBar.open('MQTT Fehler: ' + error.errorMessage, null, {\n          duration: 2000\n        });\n      }\n    }, {\n      key: \"onMQTTConnectionLost\",\n      value: function onMQTTConnectionLost(info) {\n        console.log('MQTT CONNECTION LOST!');\n        console.log(info);\n        this.mqttConnected = false;\n        this.snackBar.open('MQTT getrennt!', null, {\n          duration: 2000\n        });\n      }\n    }, {\n      key: \"onMQTTMessage\",\n      value: function onMQTTMessage(message) {\n        if (message.destinationName == 'hello') {\n          this.snackBar.open('MQTT Message: ' + message.payloadString, null, {\n            duration: 2000\n          });\n        } else {\n          try {\n            this.updateFTFs(message);\n          } catch (error) {\n            console.log(error);\n          }\n        }\n      }\n    }, {\n      key: \"onMQTTDisconnect\",\n      value: function onMQTTDisconnect() {\n        console.log('MQTT Disconnected.');\n        this.mqttConnected = false;\n        this.snackBar.open('MQTT getrennt!', 'OK', {\n          duration: 2000\n        });\n      }\n    }, {\n      key: \"toggleSettings\",\n      value: function toggleSettings() {\n        var _this6 = this;\n\n        var component = this;\n        var dialogConfig = new MatDialogConfig();\n        dialogConfig.width = \"400px\";\n        dialogConfig.data = {\n          mapChanged: false,\n          mapMetersPerPixel: this.mapMetersPerPixel,\n          mapXoffset: this.mapXoffset,\n          mapYoffset: this.mapYoffset,\n          mqttChanged: false,\n          mqttHost: this.mqttHost,\n          mqttPort: this.mqttPort,\n          mqttClientID: this.mqttClientID\n        };\n        var settingsDialogRef = this.settingsDialog.open(SettingsFormComponent, dialogConfig);\n        settingsDialogRef.afterClosed().subscribe(function (result) {\n          if (result) {\n            console.log('saved');\n            _this6.mapMetersPerPixel = result.mapMetersPerPixel;\n            _this6.mapXoffset = result.mapXoffset;\n            _this6.mapYoffset = result.mapYoffset;\n\n            if (result.customMap) {\n              var stage = document.getElementById('stage');\n              var image = new Image();\n              image.src = result.customMap;\n\n              image.onload = function () {\n                stage.setAttribute('style', \"background-image: url('\" + result.customMap + \"')\");\n                localStorage.setItem('customMap', result.customMap);\n                component.mapWidthInPixels = image.width;\n                component.mapHeightInPixels = image.height;\n                component.calculateMapDisplaySettings();\n                component.setStageSizeToDisplaySettings();\n                component.initScales();\n              };\n            }\n\n            _this6.mqttHost = result.mqttHost;\n            _this6.mqttPort = Number(result.mqttPort);\n            _this6.mqttClientID = result.mqttClientID;\n\n            if (result.mqttChanged) {\n              _this6.saveMQTTSettings();\n\n              _this6.initMQTT();\n            }\n\n            if (result.mapChanged) {\n              // evtl. berichtigung der Längen und Breitenangaben\n              _this6.initScales();\n\n              _this6.updateCoordinateSystem();\n\n              localStorage.setItem('mapMetersPerPixel', result.mapMetersPerPixel.toString());\n            }\n          } else {\n            console.log('not saved');\n          }\n        });\n      }\n    }, {\n      key: \"toggleMQTT\",\n      value: function toggleMQTT() {\n        if (this.mqttConnected) {\n          this.mqtt.disconnect();\n          this.mqttManuallyDisconnected = true;\n        } else {\n          this.initMQTT();\n        }\n      }\n    }, {\n      key: \"initFTF\",\n      value: function initFTF() {\n        if (!this.loadFTFs()) {\n          var ftf = new FTF();\n          ftf.manufacturer = 'KIT';\n          ftf.fleet = 'KARIS';\n          ftf.name = '0001';\n          ftf.x = 0;\n          ftf.y = 0;\n          ftf.theta = 0;\n          ftf.batteryStatus = 0.1;\n          this.mqtt.subscribe(ftf.getBaseTopic() + '/#');\n          this.ftfs.push(ftf);\n        }\n      }\n    }, {\n      key: \"drawFTFs\",\n      value: function drawFTFs() {\n        var _this7 = this;\n\n        var ftfSymbolGroup = this.ftfGroup.selectAll('g').data(this.ftfs, function (d) {\n          return d.id;\n        });\n        var module = this;\n        ftfSymbolGroup.attr('transform', function (d) {\n          return 'translate(' + _this7.xScale(d.x) + ',' + _this7.yScale(d.y) + ')';\n        });\n        ftfSymbolGroup.select('use.ftfBodyClass').attr('transform', function (d) {\n          return 'rotate(' + -d.theta * (180.0 / Math.PI) + ')';\n        });\n        ftfSymbolGroup.select('use.powerClass').attr('transform', function (d) {\n          return 'translate(' + -15.0 * (1 - d.batteryStatus) + ',0) scale(' + d.batteryStatus + ',1)';\n        });\n        var initFtfSymbol = ftfSymbolGroup.enter().append('svg:g').attr('id', function (d) {\n          return 'FTF' + d.id;\n        }).attr('transform', function (d) {\n          return 'translate(' + _this7.xScale(d.x) + ',' + _this7.yScale(d.y) + ')';\n        }).on('mouseup', function (event, d) {\n          event.stopPropagation();\n\n          if (_this7.lastKeyDown === 17) {\n            // Control key held!\n            module.addNodeOnFTFPosition(d);\n            return;\n          }\n\n          var dialogConfig = new MatDialogConfig();\n          dialogConfig.data = d;\n\n          var ftfDialogRef = _this7.ftfDialog.open(FtfFormComponent, dialogConfig);\n\n          ftfDialogRef.afterClosed().subscribe(function (result) {\n            if (result) {\n              Object.assign(d, result);\n            }\n          });\n        });\n        initFtfSymbol.append('svg:use').attr('xlink:href', \"#ftfBody\").attr('class', 'ftfBodyClass') //.attr('id', 'ftfBody')\n        .attr('transform', function (d) {\n          return 'rotate(' + -d.theta * (180.0 / Math.PI) + ')';\n        });\n        initFtfSymbol.append('svg:use').attr('class', 'powerBarClass').attr('xlink:href', \"#powerBar\").attr('x', 0).attr('y', 18);\n        initFtfSymbol.append('svg:use').attr('xlink:href', \"#power\").attr('class', 'powerClass') //.attr('id', 'power')\n        .attr('x', 0).attr('y', 18).attr('transform', function (d) {\n          return 'translate(' + -15.0 * (1 - d.batteryStatus) + ',0) scale(' + d.batteryStatus + ',1)';\n        });\n        ftfSymbolGroup.exit().remove();\n      }\n    }, {\n      key: \"updateFTFs\",\n      value: function updateFTFs(message) {\n        try {\n          var topic = message.destinationName.split('/');\n          var name = topic[2];\n          var subtopic = topic[3];\n          var ftfToUpdate = this.ftfs.find(function (ftf) {\n            return ftf.name == name;\n          });\n          ftfToUpdate.addMessage(message);\n          ftfToUpdate.updateByMQTT(message);\n          this.drawFTFs();\n        } catch (error) {\n          this.snackBar.open('Kaputtes JSON als Navimessage erhalten. Kein Positionsupdate möglich.', undefined, {\n            duration: 2000\n          });\n          console.log(error);\n          console.log(message);\n        }\n      }\n    }, {\n      key: \"addFTF\",\n      value: function addFTF() {\n        var _this8 = this;\n\n        var newFTF = new FTF();\n        var dialogConfig = new MatDialogConfig();\n        dialogConfig.data = newFTF;\n        var ftfDialogRef = this.ftfDialog.open(FtfFormComponent, dialogConfig);\n        ftfDialogRef.afterClosed().subscribe(function (result) {\n          if (result) {\n            _this8.ftfs.push(result);\n\n            _this8.mqtt.subscribe(result.getBaseTopic() + '/#');\n\n            console.log(result);\n          }\n        });\n      }\n    }, {\n      key: \"toggleRouteForm\",\n      value: function toggleRouteForm() {\n        if (this.routeFormVisible) {\n          this.routeFormVisible = false;\n        } else {\n          this.routeFormVisible = true;\n          this.ftfListVisible = false;\n        }\n      }\n    }, {\n      key: \"toggleFtfList\",\n      value: function toggleFtfList() {\n        if (this.ftfListVisible) {\n          this.ftfListVisible = false;\n        } else {\n          this.ftfListVisible = true;\n          this.routeFormVisible = false;\n        }\n      }\n    }, {\n      key: \"loadFTFs\",\n      value: function loadFTFs() {\n        var ftfJson = localStorage.getItem('list_of_ftfs');\n\n        if (ftfJson != null) {\n          var ftfArray = JSON.parse(ftfJson);\n\n          var _iterator2 = _createForOfIteratorHelper(ftfArray),\n              _step2;\n\n          try {\n            for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n              var ftfToRestore = _step2.value;\n              var ftf = new FTF();\n              ftf.manufacturer = ftfToRestore.manufacturer;\n              ftf.fleet = ftfToRestore.fleet;\n              ftf.name = ftfToRestore.name;\n              this.ftfs.push(ftf);\n              this.mqtt.subscribe(ftf.getBaseTopic() + '/#');\n            }\n          } catch (err) {\n            _iterator2.e(err);\n          } finally {\n            _iterator2.f();\n          }\n\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }, {\n      key: \"addNodeOnFTFPosition\",\n      value: function addNodeOnFTFPosition(ftf) {\n        var node = new Node();\n        node.position.x = ftf.x;\n        node.position.y = ftf.y;\n        node.position.theta = ftf.theta;\n        node.routeID = this.currentRoute.routeID; // check if route already has a start\n\n        if (this.currentRoute.nodes.length == 0) {\n          node.start = true;\n          this.currentRoute.startNode = node;\n        } else if (this.currentRoute.nodes.length == 1) {\n          node.end = true;\n          this.currentRoute.endNode = node;\n        } else {\n          node.end = true;\n          this.currentRoute.nodes[this.currentRoute.nodes.length - 1].end = false;\n          this.currentRoute.endNode = node;\n        }\n\n        this.nodes.push(node);\n        this.currentRoute.nodes.push(node); // automatically add edge between nodes, but only if they are on the same route!\n\n        if (this.currentRoute.nodes.length > 1) {\n          this.addEdge(this.currentRoute.nodes[this.currentRoute.nodes.length - 2], this.currentRoute.nodes[this.currentRoute.nodes.length - 1]);\n        }\n\n        this.drawCircles();\n        this.drawEdges();\n      }\n    }, {\n      key: \"drawCoordinateSystem\",\n      value: function drawCoordinateSystem() {\n        this.stage.append('g').attr('id', 'coordinateSystem').attr('transform', 'translate(' + this.xScale(0) + ',' + this.yScale(0) + ')').append('svg:use').attr('xlink:href', '#coordSys'); //.attr('transform', 'scale(0.3)')\n      }\n    }, {\n      key: \"updateCoordinateSystem\",\n      value: function updateCoordinateSystem() {\n        this.stage.selectAll('#coordinateSystem').attr('transform', 'translate(' + this.xScale(0) + ',' + this.yScale(0) + ')');\n      }\n    }]);\n\n    return GraphMapComponent;\n  }();\n\n  GraphMapComponent.ɵfac = function GraphMapComponent_Factory(t) {\n    return new (t || GraphMapComponent)(i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i2.MatSnackBar), i0.ɵɵdirectiveInject(i1.MatDialog), i0.ɵɵdirectiveInject(i1.MatDialog));\n  };\n\n  GraphMapComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GraphMapComponent,\n    selectors: [[\"app-graph-map\"]],\n    decls: 46,\n    vars: 8,\n    consts: [[1, \"example-spacer\"], [3, \"vertical\"], [\"mat-flat-button\", \"\", 3, \"color\", \"click\"], [\"mat-icon-button\", \"\", 3, \"click\"], [\"mat-button\", \"\", 3, \"click\"], [1, \"example-icon\"], [\"id\", \"stage\", \"width\", \"701\", \"height\", \"489\", 2, \"background-image\", \"url('../../assets/map.png')\"], [\"id\", \"arrow\"], [\"x1\", \"0\", \"y1\", \"0\", \"x2\", \"50\", \"y2\", \"0\", \"stroke-width\", \"6px\", \"stroke-linecap\", \"round\"], [\"x1\", \"50\", \"y1\", \"0\", \"x2\", \"40\", \"y2\", \"10\", \"stroke-width\", \"6px\", \"stroke-linecap\", \"round\"], [\"x1\", \"50\", \"y1\", \"0\", \"x2\", \"40\", \"y2\", \"-10\", \"stroke-width\", \"6px\", \"stroke-linecap\", \"round\"], [\"id\", \"coordSys\", \"transform\", \"scale(0.3)\"], [0, \"xlink\", \"href\", \"#arrow\", \"stroke\", \"#d21f3c\", 1, \"xArrow\"], [0, \"xlink\", \"href\", \"#arrow\", \"stroke\", \"#00a86b\", 1, \"yArrow\", 2, \"transform\", \"rotate(-90deg)\"], [\"cx\", \"0\", \"cy\", \"0\", \"r\", \"10\", \"stroke-width\", \"5\", \"fill\", \"none\", \"stroke\", \"#0000FF\"], [\"cx\", \"0\", \"cy\", \"0\", \"r\", \"2\", \"stroke-width\", \"5\", \"fill\", \"#0000FF\", \"stroke\", \"#0000FF\"], [\"x\", \"50\", \"y\", \"-10\", \"font-family\", \"sans-serif\", \"font-weight\", \"bolder\", \"fill\", \"#d21f3c\"], [\"x\", \"5\", \"y\", \"-50\", \"font-family\", \"sans-serif\", \"font-weight\", \"bolder\", \"fill\", \"#00a86b\"], [\"x\", \"-20\", \"y\", \"20\", \"font-family\", \"sans-serif\", \"font-weight\", \"bolder\", \"fill\", \"#0000FF\"], [\"id\", \"nodeEditor\", 4, \"ngIf\"], [\"id\", \"routeFormContainer\", 4, \"ngIf\"], [\"id\", \"ftfListContainer\", 4, \"ngIf\"], [\"id\", \"nodeEditor\"], [3, \"node\"], [\"id\", \"routeFormContainer\"], [3, \"routes\", \"mqtt\", \"ftfs\"], [\"id\", \"ftfListContainer\"], [3, \"ftfs\"]],\n    template: function GraphMapComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"mat-toolbar\");\n        i0.ɵɵelementStart(1, \"span\");\n        i0.ɵɵtext(2, \"VD(M)A Leitsystem Dummy\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"span\", 0);\n        i0.ɵɵelement(4, \"mat-divider\", 1);\n        i0.ɵɵelementStart(5, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function GraphMapComponent_Template_button_click_5_listener() {\n          return ctx.toggleRouteForm();\n        });\n        i0.ɵɵtext(6, \"Routen\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function GraphMapComponent_Template_button_click_7_listener() {\n          return ctx.addRoute();\n        });\n        i0.ɵɵelementStart(8, \"mat-icon\");\n        i0.ɵɵtext(9, \"add\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"mat-divider\", 1);\n        i0.ɵɵelement(11, \"span\", 0);\n        i0.ɵɵelementStart(12, \"button\", 2);\n        i0.ɵɵlistener(\"click\", function GraphMapComponent_Template_button_click_12_listener() {\n          return ctx.toggleFtfList();\n        });\n        i0.ɵɵtext(13, \"Fahrzeuge\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function GraphMapComponent_Template_button_click_14_listener() {\n          return ctx.addFTF();\n        });\n        i0.ɵɵelementStart(15, \"mat-icon\");\n        i0.ɵɵtext(16, \"add\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(17, \"span\", 0);\n        i0.ɵɵelementStart(18, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function GraphMapComponent_Template_button_click_18_listener() {\n          return ctx.toggleMQTT();\n        });\n        i0.ɵɵtext(19, \"MQTT\");\n        i0.ɵɵelementStart(20, \"mat-icon\", 5);\n        i0.ɵɵtext(21);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(22, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function GraphMapComponent_Template_button_click_22_listener() {\n          return ctx.toggleSettings();\n        });\n        i0.ɵɵelementStart(23, \"mat-icon\", 5);\n        i0.ɵɵtext(24, \"settings\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵnamespaceSVG();\n        i0.ɵɵelementStart(25, \"svg\", 6);\n        i0.ɵɵelementStart(26, \"defs\");\n        i0.ɵɵelementStart(27, \"g\", 7);\n        i0.ɵɵelement(28, \"line\", 8);\n        i0.ɵɵelement(29, \"line\", 9);\n        i0.ɵɵelement(30, \"line\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(31, \"g\", 11);\n        i0.ɵɵelement(32, \"use\", 12);\n        i0.ɵɵelement(33, \"use\", 13);\n        i0.ɵɵelement(34, \"circle\", 14);\n        i0.ɵɵelement(35, \"circle\", 15);\n        i0.ɵɵelementStart(36, \"text\", 16);\n        i0.ɵɵtext(37, \"X\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(38, \"text\", 17);\n        i0.ɵɵtext(39, \"Y\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(40, \"text\", 18);\n        i0.ɵɵtext(41, \"Z\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵnamespaceHTML();\n        i0.ɵɵelement(42, \"br\");\n        i0.ɵɵtemplate(43, GraphMapComponent_div_43_Template, 2, 1, \"div\", 19);\n        i0.ɵɵtemplate(44, GraphMapComponent_div_44_Template, 2, 3, \"div\", 20);\n        i0.ɵɵtemplate(45, GraphMapComponent_div_45_Template, 2, 1, \"div\", 21);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"vertical\", true);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"color\", ctx.routeFormVisible ? \"primary\" : \"basic\");\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"vertical\", true);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"color\", ctx.ftfListVisible ? \"primary\" : \"basic\");\n        i0.ɵɵadvance(9);\n        i0.ɵɵtextInterpolate(ctx.mqttConnected ? \"wifi\" : \"wifi_off\");\n        i0.ɵɵadvance(22);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectedNode != null);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.routeFormVisible);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.ftfListVisible);\n      }\n    },\n    styles: [\"@import\\\"https://unpkg.com/bootstrap@3.3.7/dist/css/bootstrap.min.css\\\";[_nghost-%COMP%]     path{stroke-width:5px;stroke:#000}[_nghost-%COMP%]     path:hover{stroke-width:5px;stroke:red;filter:drop-shadow(10 10 7px rgba(0,0,0,.5))}[_nghost-%COMP%]     .idText{-webkit-touch-callout:none;-webkit-user-select:none;user-select:none}[_nghost-%COMP%]     #nodeEditor{z-index:10;position:absolute;width:300px;height:300px;left:50px;top:100px}[_nghost-%COMP%]     #dragline{z-index:20;visibility:hidden}#mapSettings[_ngcontent-%COMP%]{position:absolute;right:10px;top:25px;display:inline-grid;grid:auto auto;z-index:20;background-color:#fff}#settingsButton[_ngcontent-%COMP%]{position:absolute;right:10px;top:10px;z-index:10}.example-spacer[_ngcontent-%COMP%]{flex:1 1 auto}.hidden[_ngcontent-%COMP%]{visibility:hidden}svg[_ngcontent-%COMP%]{background-size:100% auto;box-shadow:0 4px 8px #0003,0 6px 20px #00000030}#routeFormContainer[_ngcontent-%COMP%]{position:absolute;right:0px;top:64px;padding:30px}#ftfListContainer[_ngcontent-%COMP%]{position:absolute;right:0px;top:64px;width:30%;padding:30px}\"]\n  });\n  return GraphMapComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}