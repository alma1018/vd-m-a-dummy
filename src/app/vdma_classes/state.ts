import { Trajectory } from "./systemState";
import { NodePosition } from "./systemState";
// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

/**
 * all encompassing state of the AGV. Internal Document version: 5.0.0
 */
 export class State {
    /**
     * Contains a list of the current actions and the actions which are yet to be finished. This
     * may include actions from previous nodes that are still in progress
     * When an action is completed, an updated state message is published with actionStatus set
     * to finished and if applicable with the corresponding resultDescription. The actionStates
     * are kept until a new order is received.
     */
    actionStates: ActionState[];
    /**
     * The AGVs position
     */
    agvPosition?: AgvPosition;
    /**
     * All information relating to the battery.
     */
    batteryState: BatteryState;
    /**
     * Used by line guided vehicles to indicate the distance it has been driving past the
     * â€žlastNodeIdâ€œ.
     * Distance is in meters
     */
    distanceSinceLastNode?: number;
    /**
     * True: indicates that the AGV is driving and/or rotating. Other movements of the AGV (e.g.
     * lift movements) are not included here.
     * False: indicates that the AGV is neither driving nor rotating
     */
    driving: boolean;
    /**
     * Information about the edges the AGV still has to drive over. Empty list if the AGV is
     * idle.
     */
    edgeStates: EdgeState[];
    /**
     * Array of errors. Errors are kept until resolution.
     */
    errors: Error[];
    /**
     * headerId of the message. The headerId is defined per topic and incremented by 1 with each
     * sent (but not necessarily received) message.
     */
    headerId: number;
    /**
     * Array of information messages. Messages are only for visualization/debugging. There's no
     * specification when these messages are deleted.
     */
    information?: Information[];
    /**
     * nodeId of last reached node or, if AGV is currently on a node, current node (e. g.
     * â€œnode7â€). Empty string (â€œâ€) if no lastNodeId is available.
     */
    lastNodeId: string;
    /**
     * sequenceId of the last reached node or, if the AGV is currently on a node, sequenceId of
     * current node.
     * â€œ0â€ if no lastNodeSequenceId is available.
     */
    lastNodeSequenceId: number;
    /**
     * Array for information about the loads that an AGV currently carries, if the AGV has any
     * information about them. This array is optional: if an AGV cannot reason about its load
     * state, it shall not send this field. If an empty field is sent, MC is to assume that the
     * AGV can reason about its load state and that the AGV currently does not carry a load.
     */
    loads?: Load[];
    /**
     * Manufacturer of the AGV
     */
    manufacturer: string;
    /**
     * True: AGV is almost at the end of the base and will reduce speed if no new base is
     * transmitted. Trigger for MC to send ne base
     * False: no base update required
     */
    newBaseRequest?: boolean;
    /**
     * Information about the nodes the AGV still has to drive over. Empty list if idle.
     */
    nodeStates: NodeState[];
    /**
     * Current operating mode of the AGV.
     */
    operatingMode: OperatingMode;
    /**
     * Unique order identification of the current order or the previous finished order. The
     * orderId is kept until a new order is received. Empty string (â€œâ€) if no previous
     * orderId is available.
     */
    orderId: string;
    /**
     * Order Update Identification to identify that an order update has been accepted by the
     * AGV. â€œ0â€ if no previous orderUpdateId is available.
     */
    orderUpdateId: number;
    /**
     * True: AGV is currently in a paused state, either because of the push of a physical button
     * on the AGV or because of an instantAction. The AGV can resume the order.
     * False: The AGV is currently not in a paused state.
     */
    paused: boolean;
    /**
     * Object that holds information about the safety status
     */
    safetyState: SafetyStatus;
    /**
     * Serial number of the AGV.
     */
    serialNumber: string;
    /**
     * Timestamp in ISO8601 format.
     */
    timestamp: string;
    /**
     * The AGVs velocity in vehicle coordinates
     */
    velocity?: Velocity;
    /**
     * Version of the protocol [Major].[Minor].[Patch]
     */
    version: string;
    /**
     * Unique ID of the zone set that the AGV currently uses for path planning. Must be the same
     * as the one used in the order, otherwise the AGV is to reject the order.
     * Optional: If the AGV does not use zones, this field can be omitted.
     */
    zoneSetId?: string;
}

export class ActionState {
    /**
     * Additional information on the action.
     */
    actionDescription?: string;
    /**
     * Unique actionId
     */
    actionId: string;
    /**
     * waiting: waiting for trigger
     * failed: action could not be performed.
     */
    actionStatus: ActionStatus;
    /**
     * actionType of the action.
     * Optional: Only for informational or visualization purposes. Order knows the type.
     */
    actionType?: string;
    /**
     * Description of the result, e.g. the result of a rfid-read.
     */
    resultDescription?: string;
}

/**
 * waiting: waiting for trigger
 * failed: action could not be performed.
 */
export enum ActionStatus {
    Failed = "failed",
    Finished = "finished",
    Initializing = "initializing",
    Running = "running",
    Waiting = "waiting",
}

/**
 * The AGVs position
 */
export class AgvPosition {
    /**
     * Value for position deviation range in meters. Can be used if the AGV is able to derive it.
     */
    deviationRange?: number;
    /**
     * Describes the quality of the localization and therefore, can be used e. g. by SLAM-AGVs
     * to describe how accurate the current position information is.
     * 0.0: position unknown
     * 1.0: position known
     * Optional for vehicles that cannot estimate their localization score.
     * Only for logging and visualization purposes
     */
    localizationScore?: number;
    mapDescription?:    string;
    mapId:              string;
    /**
     * True if the AGVs position is initialized, false, if position is not initizalized.
     */
    positionInitialized: boolean;
    theta:               number;
    x:                   number;
    y:                   number;
}

/**
 * All information relating to the battery.
 */
export class BatteryState {
    /**
     * State of Charge:
     * If AGV only provides values for good or bad battery levels, these will be indicated as
     * 20% (bad) and 80% (good).
     */
    batteryCharge: number;
    /**
     * State of health in percent.
     */
    batteryHealth?: number;
    /**
     * Battery voltage
     */
    batteryVoltage?: number;
    /**
     * If true: Charging in progress.
     */
    charging: boolean;
    /**
     * estimated reach with actual State of Charge
     */
    reach?: number;
}

export class EdgeState {
    /**
     * Verbose Edge description
     */
    edgeDescription?: string;
    /**
     * Unique edge identification
     */
    edgeId: string;
    /**
     * True: Edge is part of base. False: Edge is part of horizon.
     */
    released: boolean;
    /**
     * sequenceId of the edge.
     */
    sequenceId: number;
    /**
     * The trajectory is to be communicated as a NURBS and is defined in chapter 5.4 Topic:
     * Order (from master control to AGV).
     * Trajectory segments are from the point where the AGV starts to enter the edge until the
     * point where it reports that the next node was traversed.
     */
    trajectory?: Trajectory;
}

export class Error {
    /**
     * Verbose description of error.
     */
    errorDescription?: string;
    /**
     * warning: AGV is ready to drive without human intervention
     * fatal: AGV is not in running condition.
     */
    errorLevel?:      ErrorLevel;
    errorReferences?: ErrorReference[];
    /**
     * Type of error.
     */
    errorType?: string;
}

/**
 * warning: AGV is ready to drive without human intervention
 * fatal: AGV is not in running condition.
 */
export enum ErrorLevel {
    Fatal = "FATAL",
    Warning = "WARNING",
}

/**
 * Object that holds the error reference (e.g. orderId, orderUpdateId, actionId...) as
 * key-value pairs.
 */
export class ErrorReference {
    referenceKey:   string;
    referenceValue: string;
}

export class Information {
    /**
     * Verbose description of error.
     */
    infoDescription?: string;
    /**
     * Type of information
     */
    infoLevel?:      InfoLevel;
    infoReferences?: InfoReference[];
    /**
     * Type of Information.
     */
    infoType?: string;
}

/**
 * Type of information
 */
export enum InfoLevel {
    Debug = "DEBUG",
    Info = "INFO",
}

/**
 * Object that holds the info reference (e.g. orderId, orderUpdateId, actionId...) as
 * key-value pairs.
 */
export class InfoReference {
    referenceKey:   string;
    referenceValue: string;
}

/**
 * Load object that describes the load if the AGV has information about it.
 */
export class Load {
    /**
     * This point describes the loads position on the AGV in the vehicle coordinates. The
     * boundingBoxReference point is in the middle of the footprint of the load, so length/2 and
     * width/2.
     */
    boundingBoxReference?: BoundingBoxReference;
    /**
     * Dimensions of the loadâ€™s bounding box in meters.
     */
    loadDimensions?: LoadDimensions;
    /**
     * Unique identification number of the load (e. g. barcode or RFID)
     * Empty field if the AGV can identify the load but didnâ€™t identify the load yet.
     * Optional if the AGV has cannot identify the load.
     */
    loadId?: string;
    /**
     * Indicates which load handling/carrying unit of the AGV is used, e. g. in case the AGV has
     * multiple spots/positions to carry loads.
     * For example: â€œfrontâ€, â€œbackâ€, â€œpositionC1â€, etc.
     * Optional for vehicles with only one loadPosition.
     */
    loadPosition?: string;
    loadType?:     string;
    /**
     * Weight of load in kg
     */
    weight?: number;
}

/**
 * This point describes the loads position on the AGV in the vehicle coordinates. The
 * boundingBoxReference point is in the middle of the footprint of the load, so length/2 and
 * width/2.
 */
export class BoundingBoxReference {
    theta?: number;
    x:      number;
    y:      number;
    z:      number;
}

/**
 * Dimensions of the loadâ€™s bounding box in meters.
 */
export class LoadDimensions {
    /**
     * Absolute height of the loads bounding box in meter.
     * Optional:
     * Set value only if known.
     */
    height?: number;
    /**
     * Absolute length of the loads bounding box in meter.
     */
    length: number;
    /**
     * Absolute width of the loads bounding box in meter.
     */
    width: number;
}

export class NodeState {
    /**
     * Verbose node description
     */
    nodeDescription?: string;
    /**
     * Unique node identification
     */
    nodeId: string;
    /**
     * Node position. The object is defined in chapter 5.4 Topic: Order (from master control to
     * AGV).
     * Optional:
     * Master control has this information. Can be sent additionally, e. g. for debugging
     * purposes.
     */
    nodePosition?: NodePosition;
    /**
     * True: indicates that the node is part of the base. False: indicates that the node is part
     * of the horizon.
     */
    released: boolean;
    /**
     * sequenceId of the node.
     */
    sequenceId: number;
}


/**
 * Current operating mode of the AGV.
 */
export enum OperatingMode {
    Automatic = "AUTOMATIC",
    Manual = "MANUAL",
    Semiautomatic = "SEMIAUTOMATIC",
    Service = "SERVICE",
    Teachin = "TEACHIN",
}

/**
 * Object that holds information about the safety status
 */
export class SafetyStatus {
    /**
     * autoAck, manual, remote, none
     */
    eStop: EStop;
    /**
     * Protective field violation
     */
    fieldViolation: boolean;
}

/**
 * autoAck, manual, remote, none
 */
export enum EStop {
    AutoACK = "autoAck",
    Manual = "manual",
    None = "none",
    Remote = "remote",
}

/**
 * The AGVs velocity in vehicle coordinates
 */
export class Velocity {
    omega?: number;
    vx?:    number;
    vy?:    number;
}
