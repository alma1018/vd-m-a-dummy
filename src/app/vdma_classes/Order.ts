import {Node} from "./Node";
import {Edge} from "./Edge";
import { Route } from "./Route";

// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

/**
 * The message schema to communicate orders from master control to the AGV.
 * Internal Document Version: 5.0.0
 */
 export class Order {

    /**
    * headerId of the message. The headerId is defined per topic and incremented by 1 with each
    * sent (but not necessarily received) message.
    */
    headerId: number;
    timestamp: string;
    version: string;
    manufacturer: string;  
    serialNumber: string;
    orderId: string;
    /**
     * orderUpdate identification. Is unique per orderId. If an order update is rejected, this
     * field is to be passed in the rejection message.
     */
    orderUpdateId: number;
    /**
     * Unique identifier of the zone set that the AGV has to use for navigation or that was used
     * by MC for planning.
     * Optional: Some MC systems do not use zones. Some AGVs do not understand zones. Do not add
     * to message if no zones are used.
     */
    zoneSetId?: string;

    /**
     * This list holds the base and the horizon nodes of the order graph.
     */
    nodes: Node[];
    /**
     * Base and Horizon Edges of the Order Graph.
     */
    edges: Edge[];

    success: boolean; //from old script

    constructor(route: Route, sequenceId: number) {
        this.orderId = route.name;
        this.headerId = sequenceId;
        this.timestamp = new Date().toISOString();
        this.success = route.sortNodesAndEdgesFromStartToEnd();
        this.manufacturer = "TestManufacturer"
        
        this.nodes = route.nodes;
        this.edges = route.edges;
        
        /*this.nodes.forEach((n: Node) => {
            n.cleanupForVdmaRepresentation();
        });

        this.edges.forEach((e: Edge) => {
            e.cleanupForVdmaRepresentation();
        });*/
        console.log("Original Route:");
        console.log(route);
        console.log("Generated Order:");
        console.log(this);
    }
    
    getJSON(indent=2) {
        delete this.success;
        return JSON.stringify(this, undefined, indent);
    }
    
}    


